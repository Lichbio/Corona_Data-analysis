#Import thư viện
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import ticker 
import pycountry_convert as pc
from pycountry_convert import country_mappings as cm
import folium
import plotly.express as px
import plotly.graph_objs as go
import json
import plotly.offline as py
import seaborn as sns
plt.style.use('fivethirtyeight')


# Download daily updated data on Covid-19 from Johns Hopkins
confirmed_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
deaths_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
recoveries_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')

# First record day of dataset
data = [confirmed_df, deaths_df, recoveries_df]
startdate_list = []                              # Tạo một list trống để thêm vào các giá trị là ngày đầu tiên của từng bộ dữ liệu

for x in data: 
    df_datetime= x.drop(['Province/State','Country/Region','Lat','Long'], axis=1) # Tạo một DataFrame con chỉ chứa các tên cột có kiểu datetime
    df_datetime.columns = pd.to_datetime(df_datetime.columns)  # Set type datetime cho tất cả các tên cột
    ser_datetime= pd.Series(df_datetime.columns)  # Đổi tập các tên cột từ dạng index sang dạng series
    
    ser_datetime.sort_values(ascending= True)  # Xác định giá trị ngày đầu tiên bằng hàm sort
    ser_datetime= ser_datetime.dt.strftime('%#m/%#d/%y').astype(str)  # Đổi kiểu của dữ liệu datetime thành type ban đầu sau đó đổi chúng sang string
    s= list(ser_datetime.head(1)) # Lấy giá trị ngày đầu tiên bằng head() và chuyển nó vào định dạng phần tử trong list
    startdate_list.extend(s)

print(tuple(startdate_list))

# Last record day of dataset
data = [confirmed_df, deaths_df, recoveries_df]
enddate_list = []

for x in data: 
    df_datetime= x.drop(['Province/State','Country/Region','Lat','Long'], axis=1) # Tạo một DataFrame con chỉ chứa các tên cột có kiểu datetime
    df_datetime.columns = pd.to_datetime(df_datetime.columns)  # Set type datetime cho tất cả các tên cột
    ser_datetime= pd.Series(df_datetime.columns)  # Đổi tập các tên cột từ dạng index sang dạng series
    
    ser1_datetime= ser_datetime.sort_values(ascending=False)  # Xác định giá trị ngày đầu tiên bằng hàm sort
    ser1_datetime= ser1_datetime.dt.strftime('%#m/%#d/%y').astype(str)  # Đổi kiểu của dữ liệu datetime thành type ban đầu sau đó đổi chúng sang string
    e= list(ser1_datetime.head(1)) # Lấy giá trị ngày đầu tiên bằng head() và chuyển nó vào định dạng phần tử trong list
    enddate_list.extend(e)

print(tuple(enddate_list))

# No of countries in dataset
data = [confirmed_df, deaths_df, recoveries_df]
countries=[]
for df_x in data:
    countries.extend([len(df_x['Country/Region'].unique())])  # Dùng phương thức .unique() để đếm các tên quốc gia
print(tuple(countries))

# Total days record
data = [confirmed_df, deaths_df, recoveries_df]
day_n = [ ]

for x in data: 
    df_datetime= x.drop(['Province/State','Country/Region','Lat','Long'], axis=1) # Tạo một DataFrame con chỉ chứa các tên cột có kiểu datetime
    day_n.extend([len(df_datetime.columns)])  # Đếm tên cột tương ứng với tổng số ngày có trong dữ liệu

print(tuple(day_n))


# Country and time with highest confirmed cases
# Tạo một dataframe con chỉ chứa cột tên quốc gia và các cột ngày tháng ghi nhận số ca covid
confirmed_country= confirmed_df.drop(['Province/State','Lat','Long'], axis=1)      
# Nhóm dữ liệu theo Country/Region sử dụng hàm .groupby() và tính tổng số ca mắc theo ngày của từng quốc gia, đặt thành 1 dataframe mới
cfd_country= confirmed_country.groupby('Country/Region').sum()
# Quốc gia có số ca mắc nhiều nhất trong toàn bộ dữ liệu dựa trên tổng số ca mắc tính tới thời điểm hiện tại
cfd_country_total = cfd_country[enddate_list[0]]
# Tìm quốc gia có số ca mắc nhiều nhất trong toàn bộ dữ liệu bằng phương thức .idxmax()
cfd_country_max= cfd_country_total.idxmax()
# Tìm ngày có ca mắc nhiều nhất trong bộ dữ liệu của quốc gia có tổng số ca mắc nhiều nhất bằng phương thức .idxmax()
cf_country_daymax= cfd_country.loc[cfd_country_max,:].idxmax()
# Số ca mắc của ngày có ca mắc nhiều nhất của quốc gia có tổng ca mắc nhiều nhất
cf_country_daymax_n= cfd_country.loc[cfd_country_max,:].max()
print(cfd_country_max,'-',cf_country_daymax,':', cf_country_daymax_n)


# Country and time with highest total deaths
deaths_country= deaths_df.drop(['Province/State','Lat','Long'], axis=1)
d_country= deaths_country.groupby('Country/Region').sum()
d_country_total= d_country[enddate_list[1]]
d_country_max= d_country_total.idxmax()
d_country_daymax= d_country.loc[d_country_max,:].idxmax()
d_country_daymax_n= d_country.loc[d_country_max,:].max()
print(d_country_max,'-',d_country_daymax,':', d_country_daymax_n)


#  Total confirmed cases in Vietnam (Tổng số ca mắc Covid ở Việt Nam vào thời điểm hiện tại của Việt Nam sử dụng dataframe đã nhóm theo quốc gia)
cdf_vn= cfd_country.loc['Vietnam', enddate_list[0]]

# Tổng số ca tử vong ở thời điểm hiện tại của Việt Nam
d_vn= d_country.loc['Vietnam', enddate_list[1]]

# Tổng số ca hồi phục
recoveries_country= recoveries_df.drop(['Province/State','Lat','Long'], axis=1) 
rcv_country= recoveries_country.groupby('Country/Region').sum()
rcv_vn= rcv_country.loc['Vietnam', enddate_list[2]]

# Tổng số ca còn covid
activ_case_vn= cdf_vn - d_vn - rcv_vn

print('Tổng số ca mắc Covid:', cdf_vn)
print('Tổng số ca tử vong:', d_vn)
print('Tổng số ca hồi phục:', rcv_vn)
print('Tổng số ca còn Covid:', activ_case_vn)


# Global analysis (Phân tích toàn cầu)
cols = confirmed_df.keys()
confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]
deaths = deaths_df.loc[:, cols[4]:cols[-1]]
recoveries = recoveries_df.loc[:, cols[4]:cols[-1]]
dates = confirmed.keys()

total_cases = []
total_deaths = [] 
mortality_rate = []
recovery_rate = [] 
total_recovered = [] 
total_active = [] 
adjusted_dates = list(np.array([i for i in range(len(dates))]).reshape(-1, 1)[:, 0])

total_cases = list(confirmed.sum(axis=0))
total_deaths = list(deaths.sum(axis=0))
total_recovered = list(recoveries.sum(axis=0))

for i in range(len(total_cases)):
    total_active.extend([  total_cases[i] - total_deaths[i] - total_recovered[i]  ])
    
# Tống số trường hợp Covid, tổng số ca tử vong, tổng số ca phục hồi và số ca còn mắc Covid cho tới giờ.
print("Total confirmed cases: ", total_cases[-1])
print("Total death cases: ", total_deaths[-1])
print("Total recoveries cases: ", total_recovered[-1])
print("Total active cases: ", total_active[-1])


# Data visualization: Line graph of total cases, total deaths, total recovered and total active (Vẽ biểu đồ đường hiện thị số lượng và log(10))
# Tạo một dataframe mới chứa các cột là adjusted dates, total cases, total deaths, total recovered và total active
data_total= {'adjusted dates': adjusted_dates,
             'total cases': total_cases,
             'total deaths': total_deaths, 
              'total recovered': total_recovered, 
              'total active': total_active
            }
data_t= pd.DataFrame(data_total)
data_t= data_t.set_index('adjusted dates') # Set index cho cột adjusted dates
data_t.plot(kind='line', figsize= (16,8))
plt.title('World total COVID-19 cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Number of cases')
plt.show()

# Tạo một dataframe chứa lg(cases) của total cases, total deaths, total recovered và total active
data_lg= data_t.copy()
import math
data_lg['total cases'] = data_lg['total cases'].apply(lambda x: math.log10(x))   # Thay thế giá trị số cases trong mỗi cột bằng lg(cases)
data_lg['total deaths'] = data_lg['total deaths'].apply(lambda x: math.log10(x))
data_lg['total recovered'] = data_lg['total recovered'].replace(0, np.nan)     # Loại bỏ hết các giá trị bằng 0 trong cột total recovered
data_lg['total recovered'] = data_lg['total recovered'].apply(lambda x: math.log10(x))
data_lg['total active'] = data_lg['total active'].apply(lambda x: math.log10(x))

data_lg.plot(kind='line', figsize= (16,8))
plt.title('World total COVID-19 cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Log (number of cases)')

plt.show()


data_t['total cases'].plot(kind='line', figsize= (16,8))
plt.title('World total COVID-19 cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Number of cases')
plt.show()

data_t['total deaths'].plot(kind='line', figsize= (16,8))
plt.title('World total COVID-19 death cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Number of cases')
plt.show()

data_t['total recovered'].plot(kind='line', figsize= (16,8))
plt.title('LWorld total COVID-19 recovered cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Number of cases')
plt.show()

data_t['total active'].plot(kind='line', figsize= (16,8))
plt.title('World total COVID-19 active cases reported from 1/22/2020 to date')
plt.xlabel('Days since 1/22/2020')
plt.ylabel('Number of cases')
plt.show()



# Draw line graph showing daily incresed cases
# Tạo ra các list giá trị gia tăng hàng ngày đối với từng total case, total deaths, total recovered và total active

increases_cases = []
increases_deaths = [] 
increases_recovered = [] 
increases_active = [] 
adjusted_dates_1 = list(np.array([i for i in range(len(dates)-1)]).reshape(-1, 1)[:, 0])

for i in range(len(data_t)-1):
    increases_cases.extend([total_cases[i+1] - total_cases[i]])
    increases_deaths.extend([total_deaths[i+1] - total_deaths[i]])
    increases_recovered.extend([total_recovered[i+1] - total_recovered[i]])
    increases_active.extend([total_active[i+1] - total_active[i]])
    
# Tạo một dataframe mới chứa các cột là adjusted dates 1, increases_cases, increases_deaths, increases_recovered và increases_active
data_increase = {'adjusted dates 1': adjusted_dates_1,
             'increases_cases': increases_cases,
             'increases_deaths': increases_deaths, 
              'increases_recovered': increases_recovered, 
              'increases_active': increases_active
            }
data_i = pd.DataFrame(data_increase)
data_i = data_i.set_index('adjusted dates 1') # Set index cho cột adjusted dates


ax0 = data_i['increases_cases'].plot(kind='bar', figsize= (16,8))
plt.title('World daily increases in COVID-19 cases reported from 1/23/2020 to date')
plt.xlabel('Days since 1/23/2020')
plt.xticks(np.arange(0, 870 , step = 50))
plt.ylabel('Number of cases')
ax0.legend()
plt.xticks(rotation = 0)
plt.show()

ax1 = data_i['increases_deaths'].plot(kind='bar', figsize= (16,8))
plt.title('World daily increases in COVID-19 cases reported from 1/23/2020 to date')
plt.xlabel('Days since 1/23/2020')
plt.xticks(np.arange(0, 870, step = 50))
plt.ylabel('Number cases')
ax1.legend()
plt.xticks(rotation = 0)
plt.show()

ax2 = data_i['increases_recovered'].plot(kind='bar', figsize= (16,8))
plt.title('World daily increases in COVID-19 cases reported from 1/23/2020 to date')
plt.xlabel('Days since 1/23/2020')
plt.xticks(np.arange(0, 870, step = 50))
plt.ylabel('Number of cases')
ax2.legend()
plt.xticks(rotation = 0)
plt.show()

ax3 = data_i['increases_active'].plot(kind='bar', figsize= (16,8))
plt.title('World daily increases in COVID-19 cases reported from 1/23/2020 to date')
plt.xlabel('Days since 1/23/2020')
plt.xticks(np.arange(0, 870, step = 50))
plt.ylabel('Number of cases')
ax3.legend()
plt.xticks(rotation = 0)
plt.show()



# Mortality rate and recovery rate
for i in range(len(total_cases)):
    mortality_rate.extend([total_deaths[i]*100 / total_cases[i]])
    recovery_rate.extend([total_recovered[i]*100 / total_cases[i]])
    
# Tạo một dataframe mới chứa các cột là adjusted dates, mortality rate và recovery rate
data_mort_rec = {'adjusted dates': adjusted_dates,
             'mortality rate': mortality_rate,
             'recovery rate': recovery_rate 
            }
data_mr= pd.DataFrame(data_mort_rec)
data_mr = data_mr.set_index('adjusted dates') # Set index cho cột adjusted dates
data_mr.head()


import matplotlib.patches as mpatches

ax = data_mr['mortality rate'].plot(kind='line', figsize= (16,8))
plt.title('World COVID-19 mortality rate')
plt.xlabel('Days since 1/22/2020')
y= plt.ylabel('Mortality rate(%)')
plt.axhline(data_mr['mortality rate'].mean(), color='k', linestyle='--', linewidth=4)
k_patch = mpatches.Patch(label='Average: y=%f' % data_mr['mortality rate'].mean(), color= 'k')
b_patch = mpatches.Patch(label= 'mortality rate')
ax.legend(handles=[b_patch, k_patch])
plt.show()


ax_r = data_mr['recovery rate'].plot(kind='line', figsize= (16,8))
plt.title('World COVID-19 recovery rate')
plt.xlabel('Days since 1/22/2020')
y= plt.ylabel('Recovery rate(%)')
plt.axhline(data_mr['recovery rate'].mean(), color='k', linestyle='--', linewidth=4)
k_patch = mpatches.Patch(label='Average: y=%f' % data_mr['recovery rate'].mean(), color= 'k', linestyle= '--')
b_patch = mpatches.Patch(label= 'recovery rate')
ax_r.legend(handles=[b_patch, k_patch])
plt.show()



# Continent analysis
# Preprocessing
confirmed_df.loc[confirmed_df['Country/Region'] == "US", "Country/Region"] = "USA"
deaths_df.loc[deaths_df['Country/Region'] == "US", "Country/Region"] = "USA"
recoveries_df.loc[recoveries_df['Country/Region'] == "US", "Country/Region"] = "USA"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Korea, South', "Country/Region"] = 'South Korea'
deaths_df.loc[deaths_df['Country/Region'] == 'Korea, South', "Country/Region"] = 'South Korea'
recoveries_df.loc[recoveries_df['Country/Region'] == "Korea, South", "Country/Region"] = "South Korea"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Taiwan*', "Country/Region"] = 'Taiwan'
deaths_df.loc[deaths_df['Country/Region'] == 'Taiwan*', "Country/Region"] = 'Taiwan'
recoveries_df.loc[recoveries_df['Country/Region'] == "Taiwan*", "Country/Region"] = "Taiwan"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Congo (Kinshasa)', "Country/Region"] = 'Democratic Republic of the Congo'
deaths_df.loc[deaths_df['Country/Region'] == 'Congo (Kinshasa)', "Country/Region"] = 'Democratic Republic of the Congo'
recoveries_df.loc[recoveries_df['Country/Region'] == "Congo (Kinshasa)", "Country/Region"] = "Democratic Republic of the Congo"

confirmed_df.loc[confirmed_df['Country/Region'] == "Cote d'Ivoire", "Country/Region"] = "Côte d'Ivoire"
deaths_df.loc[deaths_df['Country/Region'] == "Cote d'Ivoire", "Country/Region"] = "Côte d'Ivoire"
recoveries_df.loc[recoveries_df['Country/Region'] == "Cote d'Ivoire", "Country/Region"] = "Côte d'Ivoire"

confirmed_df.loc[confirmed_df['Country/Region'] == "Reunion", "Country/Region"] = "Réunion"
deaths_df.loc[deaths_df['Country/Region'] == "Reunion", "Country/Region"] = "Réunion"
recoveries_df.loc[recoveries_df['Country/Region'] == "Reunion", "Country/Region"] = "Réunion"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Congo (Brazzaville)', "Country/Region"] = 'Republic of the Congo'
deaths_df.loc[deaths_df['Country/Region'] == 'Congo (Brazzaville)', "Country/Region"] = 'Republic of the Congo'
recoveries_df.loc[recoveries_df['Country/Region'] == "Congo (Brazzaville)", "Country/Region"] = "Republic of the Congo"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Bahamas, The', "Country/Region"] = 'Bahamas'
deaths_df.loc[deaths_df['Country/Region'] == 'Bahamas, The', "Country/Region"] = 'Bahamas'
recoveries_df.loc[recoveries_df['Country/Region'] == "Bahamas, The", "Country/Region"] = "Bahamas"

confirmed_df.loc[confirmed_df['Country/Region'] == 'Gambia, The', "Country/Region"] = 'Gambia'
deaths_df.loc[deaths_df['Country/Region'] == 'Gambia, The', "Country/Region"] = 'Gambia'
recoveries_df.loc[recoveries_df['Country/Region'] == "Gambia, The", "Country/Region"] = "Gambia"

# nhận tất cả các quốc gia
countries = np.asarray(confirmed_df["Country/Region"])
countries1 = np.asarray(deaths_df["Country/Region"])
countries2 = np.asarray(recoveries_df["Country/Region"])

# Continent_code thành Continent_names
continents = {
    'NA': 'North America',
    'SA': 'South America', 
    'AS': 'Asia',
    'OC': 'Australia',
    'AF': 'Africa',
    'EU' : 'Europe',
    'na' : 'Others'
}

# Định nghĩa hàm để nhận continent code cho quốc gia.
def country_to_continent_code(country):
    try:
        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))
    except :
        return 'na'
       
       
 confirmed_df1 = confirmed_df.copy()
deaths_df1 = deaths_df.copy()
recoveries_df1 = recoveries_df.copy()

continent_0 = []
continent_1 = []
continent_2 = []
countries_0 = np.asarray(confirmed_df1["Country/Region"])
countries_1 = np.asarray(deaths_df1["Country/Region"])
countries_2 = np.asarray(recoveries_df1["Country/Region"])

for country in countries_0:
    continent_0.extend([country_to_continent_code(country)])

for country in countries_1:
    continent_1.extend([country_to_continent_code(country)])
    
for country in countries_2:
    continent_2.extend ([country_to_continent_code(country)])
    
confirmed_df1.insert(2, column = 'Continent', value = continent_0)
deaths_df1.insert(2, column = 'Continent', value = continent_1)
recoveries_df1.insert(2, column = 'Continent', value = continent_2)
recoveries_df1

# Chuyển continent code thành continent name

data1 = [confirmed_df1, deaths_df1, recoveries_df1]
for x_df in data1:
    x_df['Continent'] = x_df['Continent'].str.replace('NA', 'North America')
    x_df['Continent'] = x_df['Continent'].str.replace('SA', 'South America')
    x_df['Continent'] = x_df['Continent'].str.replace('AS', 'Asia')
    
    x_df['Continent'] = x_df['Continent'].str.replace('OC', 'Australia')
    x_df['Continent'] = x_df['Continent'].str.replace('AF', 'Africa')
    x_df['Continent'] = x_df['Continent'].str.replace('EU', 'Europe')
    x_df['Continent'] = x_df['Continent'].str.replace('na', 'Others')
        
        
       
# Tạo 3 dataframe con xuất phát từ 3 tệp dữ liệu ban đầu confirmed_df, deaths_df, recoveries_df

# Dataframe chứa tổng Confirmed cases theo Country
df1_1 = confirmed_df1.drop(['Province/State','Lat','Long','Continent'], axis=1)
df1_2 = df1_1.groupby('Country/Region').sum()
df1_2['Confirmed'] = df1_2[enddate_list[0]]
df1_2= df1_2.reset_index()
country_df_cfd = df1_2.loc[:,['Country/Region', 'Confirmed']]

# Dataframe chứa tổng Death cases theo Country
df2_1 = deaths_df1.drop(['Province/State','Lat','Long','Continent'], axis=1)
df2_2 = df2_1.groupby('Country/Region').sum()
df2_2['Deaths'] = df2_2[enddate_list[1]]
df2_2= df2_2.reset_index()
country_df_d = df2_2.loc[:, ['Country/Region', 'Deaths'] ]

# Dataframe chứa tổng Recovered cases theo Country
df3_1 = recoveries_df1.drop(['Province/State','Lat','Long','Continent'], axis=1)
df3_2 = df3_1.groupby('Country/Region').sum()
df3_2['Recoveries'] = df3_2[enddate_list[2]]
df3_2= df3_2.reset_index()
country_df_rec = df3_2.loc[:, ['Country/Region', 'Recoveries'] ]

# Merge tất cả 3 dataframe đã tạo được ở trên thành 1 Dataframe duy nhất 
df_merge1 = pd.merge(country_df_cfd, country_df_d , left_on='Country/Region', right_on='Country/Region', how='outer') 
country_df = pd.merge(df_merge1, country_df_rec, left_on='Country/Region', right_on='Country/Region', how='outer')

# Xử lý giá trị trống
country_df = country_df.replace(np.nan, 0)
country_df.iloc[:, 1:] = country_df.iloc[:, 1:].astype(int)

# Chèn thêm trường Continent
continents_all = []
countries_all = np.array(country_df['Country/Region']) 
for country in countries_all:
    continents_all.extend([country_to_continent_code(country)])
country_df.insert(1, column='Continent', value= continents_all)

# Tạo thêm trường Active và Molitory Rate
active1 = []
mortality_rate1 = []
for i in range(len(country_df)):
    active1.extend([ country_df.iloc[i,2] - country_df.iloc[i,3] - country_df.iloc[i,4] ])
    mortality_rate1.extend([ country_df.iloc[i,3]*100 / country_df.iloc[i,2] ])

country_df.insert(5, column='Active', value= active1)
country_df.insert(6, column='Mortality Rate', value= mortality_rate1) 
country_df.set_index('Country/Region', inplace=True)

# Chuyển continent code thành continent name

country_df['Continent'] = country_df['Continent'].str.replace('NA', 'North America')
country_df['Continent'] = country_df['Continent'].str.replace('SA', 'South America')
country_df['Continent'] = country_df['Continent'].str.replace('AS', 'Asia')
    
country_df['Continent'] = country_df['Continent'].str.replace('OC', 'Australia')
country_df['Continent'] = country_df['Continent'].str.replace('AF', 'Africa')
country_df['Continent'] = country_df['Continent'].str.replace('EU', 'Europe')
country_df['Continent'] = country_df['Continent'].str.replace('na', 'Others')


# Tạo data frame continents_df với chỉ mục là trường "continent"
country_df_edit = country_df.drop('Mortality Rate', axis = 1)
continents_df = country_df_edit.groupby('Continent').sum()
continent_mortality_rate = []

for i in range(len(continents_df)):
    continent_mortality_rate.extend([ continents_df.iloc[i,1]*100 / continents_df.iloc[i,0] ])

continents_df.insert(4, column='Mortality Rate', value= continent_mortality_rate) 



# Visualization (correlation matrix)
corr_matrix = continents_df.corr()
sns.heatmap(corr_matrix, annot = True)
plt.show()


# Pie chart
pie_continents_df = continents_df.drop('Mortality Rate', axis = 1)
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'cyan', 'lightgreen', 'pink', 'lightskyblue']
for i in range(len(pie_continents_df.columns)):
    pie_continents_df.iloc[:,i].plot(kind = 'pie', figsize = [14, 12], autopct ='%1.1f%%', startangle = 90, labels = None, colors = colors_list)
    plt.legend(labels = continents_df.index, loc = 'upper right')
    plt.title('World Total Confirmed COVID-19 Cases by Continents')
    plt.show()
    



# Country analysis
 Lọc dữ liệu vĩ trí địa lý từ bảng ban đầu của các quốc gia và thêm vào bảng country_df
geo_country_df = confirmed_df1.loc[:, ['Country/Region','Lat','Long']].drop_duplicates(subset = 'Country/Region', keep='first')
country_df1 = country_df.reset_index()
country_df2 = pd.merge(country_df1, geo_country_df, left_on= 'Country/Region', right_on='Country/Region', how='left')
country_df2.set_index('Country/Region', inplace = True)

# Lấy dữ liệu địa lý của Việt Nam
vn_loc = list(np.array(country_df2.loc['Vietnam', ['Lat', 'Long']]))
# Lập bản đồ folium
covid_worldmap = folium.Map(location=vn_loc, zoom_start=4)
covid_worldmap

# Tạo feature group để chồng lấp dữ liệu vào bản đồ folium
covid_cases = folium.map.FeatureGroup()
for lat, long, cfd in zip(country_df2['Lat'], country_df2['Long'], country_df2['Confirmed']):
    covid_cases.add_child(folium.features.CircleMarker(
        [lat, long], radius = cfd/1000000, color = 'orange', fill= True, fill_color='orange', fill_opacity=0.6))

covid_worldmap.add_child(covid_cases)
covid_worldmap

# Chèn ghi chú
folium.features.Marker(location=vn_loc, popup='<strong>' + "Vietnam" +'</strong>' + '<br>' + '<br>'+
                       "Confirmed:" + str(country_df2.loc['Vietnam','Confirmed']) +'<br>'+
                       "Deaths:" + str(country_df2.loc['Vietnam','Deaths']) +'<br>'+
                       "Recoveries:" + str(country_df2.loc['Vietnam','Recoveries']) +'<br>'+
                       "Mortality Rate:" + str(round((country_df2.loc['Vietnam','Mortality Rate']),2)) +'<br>').add_to(covid_worldmap)

country_lg = country_df2.copy()
country_lg['Confirmed'] = country_lg['Confirmed'].apply(lambda x: math.log10(x)) 
country_lg = country_lg.reset_index()
covid_2_worldmap = folium.Map(zoom_start = 4)
world_geo = r'countries.geojson'
covid_2_worldmap.choropleth(geo_data = world_geo,
                            data = country_lg,
                            columns = ['Country/Region','Confirmed'],
                            key_on = 'feature.properties.ISO_A3',
                            fill_color = 'YlOrBr',
                            legend_name = 'Log10 (number of cases)'
                           )
                           
                           

